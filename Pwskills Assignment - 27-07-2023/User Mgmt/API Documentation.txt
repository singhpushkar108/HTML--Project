The API documentation for the user management backend system using Express.js and MongoDB:

 API Overview 
- Base URL: `http://localhost:3000`

 Endpoints: 

1.  Create User Account 
   - Endpoint: `POST /register`
   - Description: Register a new user account.
   - Request Body:
      json
     {
       "name": "John Doe",
       "email": "john@example.com",
       "password": "secretpassword"
     }
      
   - Response (Success - 201):
      json
     {
       "status": 200,
       "msg": "User Registered Successfully",
       "user": {
         "_id": "user_id",
         "name": "John Doe",
         "email": "john@example.com",
         "password": "secretpassword",
         "createdAt": "timestamp",
         "updatedAt": "timestamp"
       }
     }
      
   - Response (Error - 400):
      json
     {
       "err": "User already exists"
     }
      

2.  Login 
   - Endpoint: `POST /login`
   - Description: Authenticate a user by email and password.
   - Request Body:
      json
     {
       "email": "john@example.com",
       "password": "secretpassword"
     }
      
   - Response (Success - 200):
      json
     {
       "status": 200,
       "msg": "User Login successfully",
       "userData": {
         "_id": "user_id",
         "name": "John Doe",
         "email": "john@example.com",
         "password": "secretpassword"
       }
     }
      
   - Response (Error - 400):
      json
     {
       "error": "Email and password are mandatory fields for login."
     }
      
     or
      json
     {
       "error": "Invalid email or password"
     }
      

3.  Get User by Email 
   - Endpoint: `GET /oneuser`
   - Description: Retrieve user details by email.
   - Request Query Parameter:
     - `email`: The email of the user to retrieve.
   - Response (Success - 200):
      json
     {
       "status": 200,
       "userData": {
         "_id": "user_id",
         "name": "John Doe",
         "email": "john@example.com",
         "password": "secretpassword"
       }
     }
      
   - Response (Error - 404):
      json
     {
       "error": "User Not Found"
     }
      

4.  Update User Data 
   - Endpoint: `PATCH /update`
   - Description: Update user data by email.
   - Request Body (Optional):
      json
     {
       "name": "John Smith"
     }
      
   - Response (Success - 200):
      json
     {
       "status": 200,
       "msg": "User data updated successfully",
       "updatedUser": {
         "_id": "user_id",
         "name": "John Smith",
         "email": "john@example.com",
         "password": "secretpassword",
         "createdAt": "timestamp",
         "updatedAt": "timestamp"
       }
     }
      
   - Response (Error - 404):
      json
     {
       "error": "User not found"
     }
      

5.  Delete User 
   - Endpoint: `DELETE /deluser`
   - Description: Delete a user by email.
   - Request Body:
      json
     {
       "email": "john@example.com"
     }
      
   - Response (Success - 200):
      json
     {
       "status": 200,
       "msg": "User Deleted Successfully"
     }
   - Response (Error - 404):

     {
       "error": "User Not Found"
     }

 Error Handling: 
- The API returns appropriate HTTP status codes and error messages for various scenarios, such as invalid request data, missing fields, user not found, and other errors.